// Open the file that defines the type "expr" we shall use as AST
%{
open GCLTypesAST
%}
// Declare the tokens (terminal symbols)

%token <float> NUM
%token <string> VAR
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF
%token SQB IMPL //->, []
%token TRUE FALSE AND DAND OR DOR NOT// &, &&, |, ||, !
%token IF FI DO OD SKIP ASSIGN SEM // ... :=, ; 
%token EQ NEQ GREATER LESS LEQ GEQ


// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)

/*
%right POW SQB SEM 
%left TIMES DIV PLUS MINUS //How to make distinction between unary and binary minus??
%left NOT AND DAND OR DOR 
*/

%left PLUS MINUS
%right POW SQB SEM 
%left TIMES DIV  
%left AND DAND
%left OR DOR
%left NOT


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <commands> start
%type <expr> expression
%type <booleanexpr> boolean
%type <commands> command
%type <guardedcommands> guardedcommand

// Grammar productions
%%

start: command EOF					{ $1 }

command: 
	| IF guardedcommand FI			{ If $2}
	| DO guardedcommand OD			{ Do $2}
	| SKIP 							{ Skip } 
	| VAR ASSIGN expression			{ Assign ($1,$3)}
	| command SEM command			{ Semi ($1,$3)}

guardedcommand:
	| boolean IMPL command				{ Conditional ($1, $3) }
	| guardedcommand SQB guardedcommand { Sqr ($1, $3)}

boolean:
	| TRUE							{ Boolean true }
	| FALSE							{ Boolean false }
	| boolean AND boolean			{ And ($1,$3) }
	| boolean  DAND boolean			{ Dand ($1,$3) }
	| boolean  OR boolean			{ Or ($1,$3) }
	| boolean  DOR boolean			{ Dor ($1,$3) }
	| NOT boolean 					{ Not $2 }
	| expression EQ expression	    { Eq ($1,$3) }
	| expression NEQ expression     { Neq ($1,$3) }
	| expression GEQ expression     { Geq ($1,$3) }
	| expression LEQ expression     { Leq ($1,$3) }
	| expression GREATER expression { Greater ($1,$3) }
	| expression LESS expression    { Less ($1,$3) }
	| LPAR boolean RPAR				{ BPar ($2) }

expression:
	| expression TIMES expression   { TimesExpr ($1,$3) }
	| expression DIV expression     { DivExpr ($1,$3) }
	| expression PLUS expression    { PlusExpr ($1,$3) }
	| expression MINUS expression   { MinusExpr ($1,$3) }
	| expression POW expression     { PowExpr ($1,$3) }
	| PLUS expression               { UPlusExpr $2 }
	| MINUS expression              { UMinusExpr $2 }
	| NUM                           { Num ($1) }
	| VAR							{ Var ($1) }
	| LPAR expression RPAR          { Par ($2) }


%%
